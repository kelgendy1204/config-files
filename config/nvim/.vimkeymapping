" All keymapping are in this file

" ===================================================================== "
" Keymapping for vim only without plugins
" ===================================================================== "

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Change the mapleader from \ to ,
let mapleader=","

" Apply Q macro record
nnoremap Q @q

" Easier bookmarking
nnoremap M `m

" Use (ctrl + ^) to toggle the uppercase of the letters
" Fixing caps lock problem in normal mode
" Execute 'lnoremap x X' and 'lnoremap X x' for each letter a-z.
for c in range(char2nr('A'), char2nr('Z'))
    execute 'lnoremap ' . nr2char(c+32) . ' ' . nr2char(c)
    execute 'lnoremap ' . nr2char(c) . ' ' . nr2char(c+32)
endfor
" Kill the capslock when leaving insert mode.
autocmd InsertLeave * set iminsert=0
" Set following to show "<CAPS>" in the status line when "Caps Lock" is on.
let b:keymap_name = "CAPS"
" Show b:keymap_name in status line.
set statusline^=%k

" Toggle the highlight of the current line
nnoremap <Leader><Leader>h :set cursorline!<CR>

" Toggle indent lines, should be disabled in json files
nnoremap <Leader><Leader>i :IndentLinesToggle<CR>

" Move normally between wrapped lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Redraw page
nnoremap <Leader><Leader>r :redraw!<CR>

" Don't want to jump to the first result automatically.
cnoreabbrev Ack Ack!
" Map Ack
nnoremap <Leader>a :Ack!<Space>-i<Space>

" Search will center on the line it's found in.
nnoremap n nzz
nnoremap N Nzz

" Easily create a new tab.
noremap <Leader>tn :tabnew<CR>

" Easily close a tab.
noremap <Leader>tc :tabclose<CR>

" Easily move a tab.
noremap <Leader>tm :tabmove<CR>

" Show all buffers
nnoremap <silent> <leader>b :buffers<CR>:buffer<Space>

" map escape key
imap jk <Esc>
imap kj <Esc>

" Remove highlights for search
nnoremap <silent> <leader>s :nohlsearch<cr>

" Scrolling
nnoremap <C-e> j<C-e>
nnoremap <C-y> k<C-y>

" Navigate between panes
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-h> <C-W><C-H>

" Navigate between buffers
" noremap <leader>l :bn<CR>
" noremap <leader>h :bp<CR>

" Moving lines in all modes
nnoremap <A-j> :m .+1<CR>
nnoremap <A-k> :m .-2<CR>
inoremap <A-j> <Esc>:m .+1<CR>gi
inoremap <A-k> <Esc>:m .-2<CR>gi
vnoremap <A-j> :m '>+1<CR>gv
vnoremap <A-k> :m '<-2<CR>gv

" Resize splitting windows vertically
nnoremap <C-Left> :vertical resize -5<CR>
nnoremap <C-Right> :vertical resize +5<CR>

" Resize splitting windows horizontally
nnoremap <C-Up> :resize +5<CR>
nnoremap <C-Down> :resize -5<CR>

" Disable arrow keys completely in Insert Mode
" inoremap <up> <nop>
" inoremap <down> <nop>
" inoremap <left> <nop>
" inoremap <right> <nop>

" Quickly close the current window
nnoremap <leader>q :q<CR>

" close all except the current window
nnoremap <leader>o :only<CR>

" Quickly close the current buffer
" nnoremap <leader>c :bd<CR>

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" Updating mapping
nnoremap <leader>u :update<cr>

" Saving mapping
nnoremap <leader>w :w<cr>

" Write all buffers
nnoremap <leader>W :wall<cr>

" Paste and indent text
nnoremap gp p`[v`]=

" Yank to the end of the line
nnoremap Y y$

" split screen vertically
nnoremap <leader>vv :vs<CR>

" split screen horizontally
nnoremap <leader>hh :sp<CR>

" Repalce word with a yanked words without replacing it
nnoremap <leader>r viwp`[v`]y

" Repalce a selected paragraph with a yanked words without replacing it
vnoremap <leader>r p`[v`]y

" Black hole delete in normal mode
nnoremap <leader>d "_d

" Black hole delete to the end of the line
nnoremap <leader>D "_D

" Black hole delete in visual mode
vnoremap <leader>d "_d

" Handling clipboard coping - vim-gnome is required
" Copy to clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y

" Copy to clipboard in normal mode to the end of the line
nnoremap <leader>Y "+y$
nnoremap <leader>yy "+yy

" Handling clipboard pasting - vim-gnome is required
" Copy to clipboard
nnoremap <leader>p "+p
vnoremap <leader>p "+p

" Copy to clipboard in normal mode before cursor
nnoremap <leader>P "+P
vnoremap <leader>P "+P

" Copy to clipboard in normal mode before cursor and make the cursor after the text
nnoremap <leader>gP "+gP
vnoremap <leader>gP "+gP

" Enter paste mode
set pastetoggle=<F10>

" 'cd' towards the dir in which the current file is edited
" but only change the path for the current window
map <silent> <leader>cd :lcd %:h<CR>

" Normal mode switch for termial mode
tnoremap <Esc> <C-\><C-n>

" Start and end of line
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" ===================================================================== "
" Key mapping for plugins
" ===================================================================== "

" ============== nerd tree
" Toggle nerd tree
noremap <leader>ne :NERDTreeToggle<CR>

" view the current buffer in NERDTree:
nnoremap <leader>nf :NERDTreeFind<cr>

" toggle nerdtree in the dir of the current buffer
nnoremap <leader>nn :NERDTreeToggle %<CR>

" ============== Tabularize
nnoremap <Leader>t :Tab<Space>/
vnoremap <Leader>t :Tab<Space>/

" Prettier key map
nnoremap <silent> <leader><leader>p :Prettier<CR>

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<c-j>"

" ============== Toggle tagbar
nmap <Leader><Leader>t :TagbarToggle<CR>

" In normal and visual mode, the operator gs takes any motion and uses that selection to populate the search prompt (Using grepper).
" The query is quoted automatically.
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" ===== multi_cursor
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" ============= fzf
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" ============== FZF
" FZF files open
nnoremap <c-p> :Files<CR>

" FZF files have content open
nnoremap <c-g> :Rg<CR>

" ================= Coc plugin ================= "

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Project global rename
nnoremap <leader>prw :CocSearch <C-R>=expand("<cword>")<CR><CR>

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>A  <Plug>(coc-codeaction-selected)
nmap <leader>A  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-s> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" Show All lists
nnoremap <silent> <space>l  :<C-u>CocList<cr>
" Open yank list
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
" Restart Coc
nnoremap <silent> <space>r  :<C-u>CocRestart<cr>
" show chunk diff at current position
nmap gs <Plug>(coc-git-chunkinfo)
" show commit contains current position
nmap gc <Plug>(coc-git-commit)
