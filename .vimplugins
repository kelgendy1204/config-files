" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Indent lines
Plug 'Yggdroot/indentLine'

" Bottom bar theme
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" For navigation tree
Plug 'scrooloose/nerdtree'

" For nerdtree with git integration
Plug 'Xuyuanp/nerdtree-git-plugin'

" For comments
Plug 'scrooloose/nerdcommenter'

" For syntax of any kind of files
Plug 'vim-syntastic/syntastic'

" For javascript syntax
Plug 'pangloss/vim-javascript'

" For typescript syntax
Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'peitalin/vim-jsx-typescript'
" Need more installations
Plug 'Quramy/tsuquyomi'

" For react syntax
Plug 'mxw/vim-jsx'

" For file open in directory
" Need more installations
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Hybrid theme
Plug 'kristijanhusak/vim-hybrid-material'

" Solarized theme
Plug 'altercation/vim-colors-solarized'

" Gruvbox theme
Plug 'morhetz/gruvbox'

" PaperColor theme
Plug 'NLKNguyen/papercolor-theme'

" ayu theme
Plug 'ayu-theme/ayu-vim'

" Surround code with anything
Plug 'tpope/vim-surround'

" For git gutter
Plug 'airblade/vim-gitgutter'

" For eslint integration
Plug 'dense-analysis/ale'

" For project global search
" Need more installations
" TODO look for alternatives
Plug 'mileszs/ack.vim'

" For brackets pairing
Plug 'jiangmiao/auto-pairs'

" For git integration
Plug 'tpope/vim-fugitive'

" Fuzzy search for color schemes
Plug 'flazz/vim-colorschemes'

" For multicursors
Plug 'terryma/vim-multiple-cursors'

" Vim script for text filtering and alignment
Plug 'godlygeek/tabular'

" Syntax highlighting, matching rules and mappings for the original Markdown and extensions
Plug 'plasticboy/vim-markdown'

" Other snippets
Plug 'honza/vim-snippets'

" Vim snippets
Plug 'SirVer/ultisnips'

" React snippets
Plug 'epilande/vim-react-snippets'

" Auto completion plugin
" Need more installations
Plug 'ycm-core/YouCompleteMe', { 'do': 'python3 ./install.py' }

" For buffers handling, extracting them to tabs, name the tabs and moving them
Plug 'vim-ctrlspace/vim-ctrlspace'

" Prettier plugin
" Need more installations
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Tabbar plugin
" Need more installations
Plug 'majutsushi/tagbar'

" auto closing tags
Plug 'alvan/vim-closetag'

" Allow to move between Vim panes and tmux splits seamlessly.
Plug 'christoomey/vim-tmux-navigator'

" better searching
" Need more installations
" TODO study more
Plug 'mhinz/vim-grepper'

" Oceanic theme
Plug 'mhartington/oceanic-next'

" One theme
Plug 'rakr/vim-one'

" One dark theme
Plug 'joshdick/onedark.vim'

" Window swapping
Plug 'wesQ3/vim-windowswap'

" Start screen for vim
Plug 'mhinz/vim-startify'

" gitk for vim
Plug 'cohama/agit.vim'

" Make terminal vim and tmux work better together for focusing events
Plug 'tmux-plugins/vim-tmux-focus-events'

" Initialize plugin system
call plug#end()

" ===================================================================== "
" Plugin settings
" ===================================================================== "

" ===== Airline config
let g:airline_powerline_fonts            = 1
let g:airline#extensions#tabline#enabled = 1

" enable bold and italic
let g:enable_bold_font   = 1
let g:enable_italic_font = 1

" ===== Gitgutter configuration
let g:gitgutter_enabled       = 1
let g:gitgutter_signs_enabled = 1

" Update the signs when a file is saved
autocmd BufWritePost * GitGutter

" ===== Nerdtree configuration
let g:NERDSpaceDelims    = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeChDirMode  = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore     = ['\.swp$']
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'

" ===== Nerdtree git plugin configuration
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" ===== Indent lines configurations
let g:indentLine_char    = '┆'
let g:indentLine_enabled = 1

" ===== Prettier configuration
let g:prettier#config#print_width           = 100
let g:prettier#config#tab_width             = 4
let g:prettier#config#use_tabs              = 'false'
let g:prettier#config#semi                  = 'true'
let g:prettier#config#single_quote          = 'true'
let g:prettier#config#bracket_spacing       = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens          = 'avoid'
let g:prettier#config#trailing_comma        = 'none'
let g:prettier#exec_cmd_async               = 1
" For Prettier
autocmd FileType javascript set formatprg=prettier\ --stdin
autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript

" ===== Ctrl-space setup
if has("gui_running")
    " Settings for MacVim and Inconsolata font
    let g:CtrlSpaceSymbols = { "File": "◯", "CTab": "▣", "Tabs": "▢" }
endif

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
else
    echo "silversearcher-ag package (ag command) is Required"
endif

let g:CtrlSpaceSearchTiming = 500
let g:CtrlSpaceUseTabline = 1
let g:airline_exclude_preview = 1

" ===== Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

" ===== Vim javascript configuration
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

" ===== Ale configuration
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" Enable completion where available.
" This setting must be set before ALE is loaded.
let g:ale_completion_enabled = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver', 'eslint'],
\   'vue': ['eslint']
\}
let g:ale_fixers = {
\    'javascript': ['prettier', 'eslint'],
\    'typescript': ['prettier'],
\    'vue': ['prettier'],
\    'scss': ['prettier'],
\    'html': ['prettier']
\}
let g:ale_linters_ignore = {'typescript': ['tslint']}
let g:ale_typescript_tsserver_use_global = 0

" ===== Vim close tag
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js'
" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml,js'
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx,js'
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1
" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '>'
" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'

" ===== Tmux navigator
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" ===== YCM configuration
" YCM with typescript
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']
" let g:ycm_auto_trigger=0

" ===== Tsuquyomi Plugin
autocmd FileType typescript setlocal completeopt+=menu,preview
let g:tsuquyomi_disable_default_mappings = 1
let g:tsuquyomi_use_local_typescript = 1

" Integrate with syntastic
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.
let g:typescript_indent_disable = 1

" ===== yats plugin
" highlight host specific keywords for typescript
let g:yats_host_keyword = 1

" ===== Fzf plugin

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
