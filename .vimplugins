" required for Vundle starting
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Indent lines
Plugin 'Yggdroot/indentLine'

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

" Bottom bar theme
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" For navigation tree
Plugin 'scrooloose/nerdtree'

" For nerdtree with git integration
Plugin 'Xuyuanp/nerdtree-git-plugin'

" For comments
Plugin 'scrooloose/nerdcommenter'

" For syntax of any kind of files
Plugin 'vim-syntastic/syntastic'

" For javascript syntax
Plugin 'pangloss/vim-javascript'

" For typescript syntax
Plugin 'leafgarland/typescript-vim'
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'peitalin/vim-jsx-typescript'
" Need more installations
Plugin 'Quramy/tsuquyomi'

" For react syntax
Plugin 'mxw/vim-jsx'

" For file open in directory
Plugin 'ctrlpvim/ctrlp.vim'

" Hybrid theme
Plugin 'kristijanhusak/vim-hybrid-material'

" Solarized theme
Plugin 'altercation/vim-colors-solarized'

" Gruvbox theme
Plugin 'morhetz/gruvbox'

" PaperColor theme
Plugin 'NLKNguyen/papercolor-theme'

" ayu theme
Plugin 'ayu-theme/ayu-vim'

" Surround code with anything
Plugin 'tpope/vim-surround'

" For git gutter
Plugin 'airblade/vim-gitgutter'

" For eslint integration
Plugin 'w0rp/ale'

" For project global search
" Need more installations
Plugin 'mileszs/ack.vim'

" For brackets pairing
Plugin 'jiangmiao/auto-pairs'

" For git integration
Plugin 'tpope/vim-fugitive'

" Fuzzy search for color schemes
Plugin 'flazz/vim-colorschemes'

" For multicursors
Plugin 'terryma/vim-multiple-cursors'

" Other snippets
Plugin 'honza/vim-snippets'

" Vim script for text filtering and alignment
Plugin 'godlygeek/tabular'

" Syntax highlighting, matching rules and mappings for the original Markdown and extensions
Plugin 'plasticboy/vim-markdown'

" Vim snippets
Plugin 'SirVer/ultisnips'

" React snippets
Plugin 'epilande/vim-react-snippets'

" Auto completion plugin
" Need more installations
Plugin 'Valloric/YouCompleteMe'

" For buffers handling, extracting them to tabs, name the tabs and moving them
Plugin 'vim-ctrlspace/vim-ctrlspace'

" Prettier plugin
" Need more installations
Plugin 'prettier/vim-prettier', { 'do': 'yarn install' }

" Tabbar plugin
" Need more installations
Plugin 'majutsushi/tagbar'

" auto closing tags
Plugin 'alvan/vim-closetag'

" Allow to move between Vim panes and tmux splits seamlessly.
Plugin 'christoomey/vim-tmux-navigator'

" better searching
" Need more installations
Plugin 'mhinz/vim-grepper'

" better searching
Plugin 'tacahiroy/ctrlp-funky'

" Oceanic theme
Plugin 'mhartington/oceanic-next'

" One theme
Plugin 'rakr/vim-one'

" Window swapping
Plugin 'wesQ3/vim-windowswap'

" Start screen for vim
Plugin 'mhinz/vim-startify'

" gitk for vim
Plugin 'cohama/agit.vim'

" Make terminal vim and tmux work better together for focusing events
Plugin 'tmux-plugins/vim-tmux-focus-events'

" All of your Plugins must be added before the following line
call vundle#end()

" required after Vundle ending
filetype plugin indent on

" ===================================================================== "
" Plugin settings
" ===================================================================== "

" ===== Airline config
let g:airline_powerline_fonts            = 1
let g:airline#extensions#tabline#enabled = 1

" enable bold and italic
let g:enable_bold_font   = 1
let g:enable_italic_font = 1

" ===== Gitgutter configuration
let g:gitgutter_enabled       = 1
let g:gitgutter_signs_enabled = 1

" Update the signs when a file is saved
autocmd BufWritePost * GitGutter

" ===== Ctrlp configuration
let g:ctrlp_show_hidden   = 1
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_max_files     = 0

" ===== Nerdtree configuration
let g:NERDSpaceDelims    = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeChDirMode  = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore     = ['\.swp$']
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'

" ===== Indent lines configurations
let g:indentLine_char    = '┆'
let g:indentLine_enabled = 1

" ===== Prettier configuration
let g:prettier#config#print_width           = 100
let g:prettier#config#tab_width             = 4
let g:prettier#config#use_tabs              = 'false'
let g:prettier#config#semi                  = 'true'
let g:prettier#config#single_quote          = 'true'
let g:prettier#config#bracket_spacing       = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens          = 'avoid'
let g:prettier#config#trailing_comma        = 'none'

" colorscheme solarized
" set background=dark
" let g:solarized_contrast='high'
" let g:solarized_termcolors=256
" let g:airline_solarized_bg='dark'

" hybrid theme
" set background=dark
" colorscheme hybrid_material
" let g:airline_theme = 'hybrid'

" ===== PaperColor theme
set background=dark
colorscheme PaperColor
let g:airline_theme = 'papercolor'

" set termguicolors
" let ayucolor="dark"
" let ayucolor="light"
" let ayucolor="mirage"
" colorscheme ayu

" ===== Ctrl-space setup
if has("gui_running")
    " Settings for MacVim and Inconsolata font
    let g:CtrlSpaceSymbols = { "File": "◯", "CTab": "▣", "Tabs": "▢" }
endif

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
else
    echo "silversearcher-ag package (ag command) is Required"
endif

let g:CtrlSpaceSearchTiming = 500
let g:CtrlSpaceUseTabline = 1
let g:airline_exclude_preview = 1

" ===== Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_balloons = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

" ===== Vim javascript configuration
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

" ===== Ale configuration
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" Enable completion where available.
" This setting must be set before ALE is loaded.
let g:ale_completion_enabled = 1
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver', 'eslint'],
\   'vue': ['eslint']
\}
let g:ale_fixers = {
\    'javascript': ['prettier', 'eslint'],
\    'typescript': ['prettier'],
\    'vue': ['prettier'],
\    'scss': ['prettier'],
\    'html': ['prettier']
\}
let g:ale_linters_ignore = {'typescript': ['tslint']}
let g:ale_typescript_tsserver_use_global = 0

" ===== Vim close tag
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js'

" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml,js'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'

" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx,js'

" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'

" ===== Tmux navigator
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" ===== Ctrlp-funky config
" highlight feature
let g:ctrlp_funky_matchtype = 'path'

" ===== YCM configuration
" YCM with typescript
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']
" let g:ycm_auto_trigger=0

" ===== Tsuquyomi Plugin
autocmd FileType typescript setlocal completeopt+=menu,preview
let g:tsuquyomi_disable_default_mappings = 1
let g:tsuquyomi_use_local_typescript = 1

" Integrate with syntastic
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.
let g:typescript_indent_disable = 1

" ===== yats plugin
" highlight host specific keywords for typescript
let g:yats_host_keyword = 1

" ===== Prettier
" For Prettier
autocmd FileType javascript set formatprg=prettier\ --stdin
autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript
